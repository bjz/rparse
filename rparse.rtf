{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fswiss\fcharset0 Helvetica;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red161\green33\blue108;\red240\green0\blue31;\red0\green72\blue255;
\red104\green0\blue254;\red219\green255\blue255;}
\deftab480
\pard\pardeftab480\pardirnatural

\f0\i\fs28 \cf2 In general all T types must have the copy kind.
\f1\i0\fs24 \cf0 \
\

\f0\b\fs48 char parsers
\fs36 \

\f2\i\b0\fs32 \cf3 /// Consumes a character which must satisfy the predicate.
\i0 \cf0 \

\i \cf3 /// Returns the matched character.
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b anycp
\b0 (
\i \cf4 predicate:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (\cf5 char\cf0 ) -> \cf5 bool\cf0 ) -> Parser<\cf5 char\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\b\fs32 \cf4 trait
\b0 \cf0  
\b\fs40 \shad\shadx21\shady-22\shadr0\shado85 \shadc0 CharParsers
\b0\fs32 \shad0 \
\{\
\cb6 	
\i \cf3 \cb1 /// Attempts to match any character in self. If matched the char is returned.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b anyc
\b0 () -> Parser<\cf5 char\cf0 >;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// Attempts to match no character in self. If matched the char is returned.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b noc
\b0 () -> Parser<\cf5 char\cf0 >;\
\}\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f0\b\fs48 \cf0 str parsers
\fs36 \

\f2\i\b0\fs32 \cf3 /// Consumes zero or more characters matching the predicate.
\i0 \cf0 \

\i \cf3 /// Returns the matched characters. 
\i0 \cf0 \

\i \cf3 /// 
\i0 \cf0 \

\i \cf3 /// Note that this does not increment line.
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b match0
\b0 (
\i \cf4 predicate:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (\cf5 char\cf0 ) -> \cf5 bool\cf0 ) -> Parser<@~\cf5 str\cf0 >\
\

\i \cf3 /// Consumes one or more characters matching the predicate.
\i0 \cf0 \

\i \cf3 /// Returns the matched characters. 
\i0 \cf0 \

\i \cf3 /// 
\i0 \cf0 \

\i \cf3 /// Note that this does not increment line.
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b match1
\b0 (
\i \cf4 predicate:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (\cf5 char\cf0 ) -> \cf5 bool\cf0 ) -> Parser<@~\cf5 str\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\i\fs32 \cf3 /// match1_0 := prefix+ suffix*
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b match1_0
\b0 (
\i \cf4 prefix:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (\cf5 char\cf0 ) -> \cf5 bool\cf0 , 
\i \cf4 suffix:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (\cf5 char\cf0 ) -> \cf5 bool\cf0 ) -> Parser<@~\cf5 str\cf0 >\
\

\i \cf3 /// optional_str := e?
\i0 \cf0 \

\i \cf3 ///
\i0 \cf0 \

\i \cf3 /// Returns an empty string on failure.
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b optional_str
\b0 (
\i \cf4 parser:
\i0 \cf0  parser<@~\cf5 str\cf0 >) -> parser<@~\cf5 str\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\i\fs32 \cf3 /// Calls fun once and matches the number of characters returned by fun. 
\i0 \cf0 \

\i \cf3 /// 
\i0 \cf0 \

\i \cf3 /// This does increment line.  Note that this succeeds even if zero characters are matched.
\i0 \cf0 \

\i \cf3 ///
\i0 \cf0 \

\i \cf3 /// 
\i0\b fn
\b0  \ul to_new_line\ulnone (chars: @[
\b char
\b0 ], index: 
\b uint
\b0 ) -> 
\b uint
\b0 \cf0 \

\i \cf3 /// 
\i0 \{\cf0 \

\i \cf3 ///  
\i0    
\b let
\b0  mut i = index;\cf0 \

\i \cf3 ///  
\i0    
\b loop
\b0 \cf0 \

\i \cf3 ///  
\i0    \{\cf0 \

\i \cf3 ///         // Chars will always have an EOT character. If we hit it then
\i0 \cf0 \

\i \cf3 ///         // we failed to find a new-line character so match nothing. 
\i0 \cf0 \

\i \cf3 ///  
\i0        
\b if
\b0  chars[i] == EOT\cf0 \

\i \cf3 ///  
\i0        \{\cf0 \

\i \cf3 ///  
\i0            
\b return
\b0  0;\cf0 \

\i \cf3 ///  
\i0        \}\cf0 \

\i \cf3 ///  
\i0        
\b else
\b0  
\b if
\b0  chars[i] == '\\r' || chars[i] == '\\n'\cf0 \

\i \cf3 ///  
\i0        \{\cf0 \

\i \cf3 ///             // Match all the characters up to, but not including, the first new line.
\i0 \cf0 \

\i \cf3 ///  
\i0            return i - index;\cf0 \

\i \cf3 ///  
\i0        \}\cf0 \

\i \cf3 ///  
\i0        
\b else
\b0 \cf0 \

\i \cf3 ///  
\i0        \{\cf0 \

\i \cf3 ///  
\i0            i += 1;\cf0 \

\i \cf3 ///  
\i0        \}\cf0 \

\i \cf3 ///  
\i0    \}\cf0 \

\i \cf3 /// 
\i0 \}\cf0 \

\b \cf4 fn
\b0 \cf0  
\b scan
\b0 (
\i \cf4 fun:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (@[\cf5 char\cf0 ], \cf5 uint\cf0 ) -> \cf5 uint\cf0 ) -> Parser<@~\cf5 str\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\i\fs32 \cf3 /// If all the parsers are successful then the matched text is returned.
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b seq2_ret_str
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 >(
\i \cf4 p0:
\i0 \cf0  Parser<T0>, 
\i \cf4 p1:
\i0 \cf0  Parser<T1>) -> Parser<@~\cf5 str\cf0 >\

\b \cf4 fn
\b0 \cf0  
\b seq3_ret_str
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 , 
\i \cf4 T2
\i0 \cf0 >(
\i \cf4 p0:
\i0 \cf0  Parser<T0>, 
\i \cf4 p1:
\i0 \cf0  Parser<T1>, 
\i \cf4 p2:
\i0 \cf0  Parser<T2>) -> Parser<@~\cf5 str\cf0 >\

\b \cf4 fn
\b0 \cf0  
\b seq4_ret_str
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 , 
\i \cf4 T2
\i0 \cf0 , 
\i \cf4 T3
\i0 \cf0 >(
\i \cf4 p0:
\i0 \cf0  Parser<T0>, 
\i \cf4 p1:
\i0 \cf0  Parser<T1>, 
\i \cf4 p2:
\i0 \cf0  Parser<T2>, 
\i \cf4 p3:
\i0 \cf0  Parser<T3>) -> Parser<@~\cf5 str\cf0 >\

\b \cf4 fn
\b0 \cf0  
\b seq5_ret_str
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 , 
\i \cf4 T2
\i0 \cf0 , 
\i \cf4 T3
\i0 \cf0 , 
\i \cf4 T4
\i0 \cf0 >(
\i \cf4 p0:
\i0 \cf0  Parser<T0>, 
\i \cf4 p1:
\i0 \cf0  Parser<T1>, 
\i \cf4 p2:
\i0 \cf0  Parser<T2>, 
\i \cf4 p3:
\i0 \cf0  Parser<T3>, 
\i \cf4 p4:
\i0 \cf0  Parser<T4>) -> Parser<@~\cf5 str\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\b\fs32 \cf4 trait
\b0 \cf0  
\b\fs40 \shad\shadx21\shady-22\shadr0\shado85 \shadc0 StringParsers
\b0\fs32 \shad0 \
\{\
\cb6 	
\i \cf3 \cb1 /// Returns the input that matches self. Also see liti and litv.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b lit
\b0 () -> Parser<@~\cf5 str\cf0 >;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// Returns the input that matches lower-cased self. Also see lit and litv.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b liti
\b0 () -> Parser<@~\cf5 str\cf0 >;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// s0 := e [ \\t\\r\\n]*
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b s0
\b0 () -> Parser<@~\cf5 str\cf0 >;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// s1 := e [ \\t\\r\\n]+
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b s1
\b0 () -> Parser<@~\cf5 str\cf0 >;\
\}\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f0\b\fs48 \cf0 generic parsers\

\f2\i\b0\fs32 \cf3 /// Returns a parser which always fails.
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b fails
\b0 <
\i \cf4 T
\i0 \cf0 >(
\i \cf4 mesg:
\i0 \cf0  &\cf5 str\cf0 ) -> Parser<T>\
\

\i \cf3 /// Parses with the aid of a pointer to a parser (useful for things like parenthesized expressions).
\i0 \cf0 \

\i\b \cf3 ///
\i0\b0 \cf0 \

\i\b \cf3 /// 
\b0 // create a pointer that we can initialize later with the real expr parser
\i0 \cf0 \

\i\b \cf3 /// 
\i0 let
\b0  expr_ptr = @
\b mut
\b0  ret(0i);\cf0 \

\i\b \cf3 /// 
\i0 let
\b0  expr_ref = forward_ref(expr_ptr);\cf0 \

\i\b \cf3 /// 
\i0\b0 \cf0 \

\i\b \cf3 /// 
\b0 // expr_ref can be used to parse expressions
\i0 \cf0 \

\i\b \cf3 /// 
\i0\b0 \cf0 \

\i\b \cf3 /// 
\b0 // initialize the expr_ptr with the real parser
\i0 \cf0 \

\i\b \cf3 /// 
\i0\b0 *expr_ptr = expr;\cf0 \

\b \cf4 fn
\b0 \cf0  
\b forward_ref
\b0 <
\i \cf4 T
\i0 \cf0 >(
\i \cf4 parser:
\i0 \cf0  @
\b \cf4 mut
\b0 \cf0  Parser<T>) -> Parser<T>\
\
\pard\pardeftab480\pardirnatural

\i \cf3 /// Overloaded bitwise operators.
\i0 \cf0 \
\pard\pardeftab480\pardirnatural

\b \cf4 pub
\b0 \cf0  
\b \cf4 impl
\b0 \cf0 <
\i \cf4 T
\i0 \cf0 > 
\b\fs40 \shad\shadx21\shady-22\shadr0\shado85 \shadc0 Parser
\b0\fs32 \shad0 <T>\
	
\b \cf4 fn
\b0 \cf0  
\b bitor
\b0 (
\i \cf4 rhs:
\i0 \cf0  &Parser<T>) -> Parser<T>\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 	
\b \cf4 fn
\b0 \cf0  
\b bitand
\b0 (
\i \cf4 rhs:
\i0 \cf0  &Parser<U>) -> Parser<(T, U)>\
\pard\pardeftab480\pardirnatural
\cf0 	
\b \cf4 fn
\b0 \cf0  
\b shr
\b0 (
\i \cf4 rhs:
\i0 \cf0  &Parser<U>) -> Parser<U>\
	
\b \cf4 fn
\b0 \cf0  
\b shl
\b0 (
\i \cf4 rhs:
\i0 \cf0  &Parser<U>) -> Parser<T>\
\pard\pardeftab480\pardirnatural
\cf0 \
\pard\pardeftab480\pardirnatural

\i \cf3 /// Returns a parser which always succeeds, but does not consume any input.
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b ret
\b0 <
\i \cf4 T
\i0 \cf0 >(
\i \cf4 value:
\i0 \cf0  T) -> Parser<T>\
\

\i \cf3 /// seqN := e0 e1 ... eN
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b seq2
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 , 
\i \cf4 R
\i0 \cf0 >(
\i \cf4 parser0:
\i0 \cf0  Parser<T0>, 
\i \cf4 parser1:
\i0 \cf0  Parser<T1>, 
\i \cf4 eval:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (T0, T1) -> result::Result<R, @~\cf5 str\cf0 >) -> Parser<R>\

\b \cf4 fn
\b0 \cf0  
\b seq3
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 , 
\i \cf4 T2
\i0 \cf0 , 
\i \cf4 R
\i0 \cf0 >(
\i \cf4 parser0:
\i0 \cf0  Parser<T0>, 
\i \cf4 parser1:
\i0 \cf0  Parser<T1>, 
\i \cf4 parser2:
\i0 \cf0  Parser<T2>, 
\i \cf4 eval:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (T0, T1, T2) -> result::Result<R, @~\cf5 str\cf0 >) -> Parser<R>\

\b \cf4 fn
\b0 \cf0  
\b seq4
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 , 
\i \cf4 T2
\i0 \cf0 , 
\i \cf4 T3
\i0 \cf0 , 
\i \cf4 R
\i0 \cf0 >(
\i \cf4 parser0:
\i0 \cf0  Parser<T0>, 
\i \cf4 parser1:
\i0 \cf0  Parser<T1>, 
\i \cf4 parser2:
\i0 \cf0  Parser<T2>, 
\i \cf4 parser3:
\i0 \cf0  Parser<T3>, 
\i \cf4 eval:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (T0, T1, T2, T3) -> result::Result<R, @~\cf5 str\cf0 >) -> Parser<R>\

\b \cf4 fn
\b0 \cf0  
\b seq5
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 , 
\i \cf4 T2
\i0 \cf0 , 
\i \cf4 T3
\i0 \cf0 , 
\i \cf4 T4
\i0 \cf0 , 
\i \cf4 R
\i0 \cf0 >(
\i \cf4 parser0:
\i0 \cf0  Parser<T0>, 
\i \cf4 parser1:
\i0 \cf0  Parser<T1>, 
\i \cf4 parser2:
\i0 \cf0  Parser<T2>, 
\i \cf4 parser3:
\i0 \cf0  Parser<T3>, 
\i \cf4 parser4:
\i0 \cf0  Parser<T4>, 
\i \cf4 eval:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (T0, T1, T2, T3, T4) -> result::Result<R, @~\cf5 str\cf0 >) -> Parser<R>\

\b \cf4 fn
\b0 \cf0  
\b seq6
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 , 
\i \cf4 T2
\i0 \cf0 , 
\i \cf4 T3
\i0 \cf0 , 
\i \cf4 T4
\i0 \cf0 , 
\i \cf4 T5
\i0 \cf0 , 
\i \cf4 R
\i0 \cf0 >(
\i \cf4 parser0:
\i0 \cf0  Parser<T0>, 
\i \cf4 parser1:
\i0 \cf0  Parser<T1>, 
\i \cf4 parser2:
\i0 \cf0  Parser<T2>, 
\i \cf4 parser3:
\i0 \cf0  Parser<T3>, 
\i \cf4 parser4:
\i0 \cf0  Parser<T4>, 
\i \cf4 parser5:
\i0 \cf0  Parser<T5>, 
\i \cf4 eval:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (T0, T1, T2, T3, T4, T5) -> result::Result<R, @~\cf5 str\cf0 >) -> Parser<R>\

\b \cf4 fn
\b0 \cf0  
\b seq7
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 , 
\i \cf4 T2
\i0 \cf0 , 
\i \cf4 T3
\i0 \cf0 , 
\i \cf4 T4
\i0 \cf0 , 
\i \cf4 T5
\i0 \cf0 , 
\i \cf4 T6
\i0 \cf0 , 
\i \cf4 R
\i0 \cf0 >(
\i \cf4 parser0:
\i0 \cf0  Parser<T0>, 
\i \cf4 parser1:
\i0 \cf0  Parser<T1>, 
\i \cf4 parser2:
\i0 \cf0  Parser<T2>, 
\i \cf4 parser3:
\i0 \cf0  Parser<T3>, 
\i \cf4 parser4:
\i0 \cf0  Parser<T4>, 
\i \cf4 parser5:
\i0 \cf0  Parser<T5>, 
\i \cf4 parser6:
\i0 \cf0  Parser<T6>, 
\i \cf4 eval:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (T0, T1, T2, T3, T4, T5, T6) -> result::Result<R, @~\cf5 str\cf0 >) -> Parser<R>\

\b \cf4 fn
\b0 \cf0  
\b seq8
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 , 
\i \cf4 T2
\i0 \cf0 , 
\i \cf4 T3
\i0 \cf0 , 
\i \cf4 T4
\i0 \cf0 , 
\i \cf4 T5
\i0 \cf0 , 
\i \cf4 T6
\i0 \cf0 , 
\i \cf4 T7
\i0 \cf0 , 
\i \cf4 R
\i0 \cf0 >(
\i \cf4 parser0:
\i0 \cf0  Parser<T0>, 
\i \cf4 parser1:
\i0 \cf0  Parser<T1>, 
\i \cf4 parser2:
\i0 \cf0  Parser<T2>, 
\i \cf4 parser3:
\i0 \cf0  Parser<T3>, 
\i \cf4 parser4:
\i0 \cf0  Parser<T4>, 
\i \cf4 parser5:
\i0 \cf0  Parser<T5>, 
\i \cf4 parser6:
\i0 \cf0  Parser<T6>, 
\i \cf4 parser7:
\i0 \cf0  Parser<T7>, 
\i \cf4 eval:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (T0, T1, T2, T3, T4, T5, T6, T7) -> result::Result<R, @~\cf5 str\cf0 >) -> Parser<R>\

\b \cf4 fn
\b0 \cf0  
\b seq9
\b0 <
\i \cf4 T0
\i0 \cf0 , 
\i \cf4 T1
\i0 \cf0 , 
\i \cf4 T2
\i0 \cf0 , 
\i \cf4 T3
\i0 \cf0 , 
\i \cf4 T4
\i0 \cf0 , 
\i \cf4 T5
\i0 \cf0 , 
\i \cf4 T6
\i0 \cf0 , 
\i \cf4 T7
\i0 \cf0 , 
\i \cf4 T8
\i0 \cf0 , 
\i \cf4 R
\i0 \cf0 >(
\i \cf4 parser0:
\i0 \cf0  Parser<T0>, 
\i \cf4 parser1:
\i0 \cf0  Parser<T1>, 
\i \cf4 parser2:
\i0 \cf0  Parser<T2>, 
\i \cf4 parser3:
\i0 \cf0  Parser<T3>, 
\i \cf4 parser4:
\i0 \cf0  Parser<T4>, 
\i \cf4 parser5:
\i0 \cf0  Parser<T5>, 
\i \cf4 parser6:
\i0 \cf0  Parser<T6>, 
\i \cf4 parser7:
\i0 \cf0  Parser<T7>, 
\i \cf4 parser8:
\i0 \cf0  Parser<T8>, 
\i \cf4 eval:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (T0, T1, T2, T3, T4, T5, T6, T7, T8) -> result::Result<R, @~\cf5 str\cf0 >) -> Parser<R>\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\b\fs32 \cf4 trait
\b0 \cf0  
\b\fs40 \shad\shadx21\shady-22\shadr0\shado85 \shadc0 GenericParsers
\b0\fs32 \shad0 \
\{\
\cb6 	
\i \cf3 \cb1 /// Returns value if input matches s. Also see lit.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b litv
\b0 <
\i \cf4 T
\i0 \cf0 >(
\i \cf4 value:
\i0 \cf0  T) -> Parser<T>;\
\}\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\b\fs32 \cf4 trait
\b0 \cf0  
\b\fs40 \shad\shadx21\shady-22\shadr0\shado85 \shadc0 Combinators
\b0\fs32 \shad0 <
\i \cf4 T
\i0 \cf0 >\
\{\
\cb6 	
\i \cf3 \cb1 /// chainl1 := e (op e)*
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// 
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// Left associative binary operator. eval is called for each parsed op.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b chainl1
\b0 <
\i \cf4 U
\i0 \cf0 >(
\i \cf4 op:
\i0 \cf0  Parser<U>, 
\i \cf4 eval:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (T, U, T) -> T) -> Parser<T>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// chainr1 := e (op e)*
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// 
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// Right associative binary operator. eval is called for each parsed op.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b chainr1
\b0 <
\i \cf4 U
\i0 \cf0 >(
\i \cf4 op:
\i0 \cf0  Parser<U>, 
\i \cf4 eval:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (T, U, T) -> T) -> Parser<T>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// Like note except that the mesg is also used for error reporting.
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// 
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// If label is not empty then it is used if the previous parser completely failed to parse or if its error
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// message was empty. Otherwise it suppresses errors from the parser (in favor of a later err function).
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// Non-empty labels should look like \\"expression\\" or \\"statement\\".
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b err
\b0 (
\i \cf4 label:
\i0 \cf0  &\cf5 str\cf0 ) -> Parser<T>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// Parses the text and fails if all the text was not consumed. Leading space is allowed.
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// 
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// This is typically used in conjunction with the parse method. Note that space has to have the
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// same type as parser which is backwards from how it is normally used.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b everything
\b0 <
\i \cf4 U
\i0 \cf0 >(
\i \cf4 space:
\i0 \cf0  Parser<U>) -> Parser<T>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// list := e (sep e)*
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// 
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// Values for each parsed e are returned.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b list
\b0 <
\i \cf4 U
\i0 \cf0 >(
\i \cf4 sep:
\i0 \cf0  Parser<U>) -> Parser<@~[T]>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// Logs the result of the previous parser.
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// 
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// If it was successful then the log is at INFO level. Otherwise it is at DEBUG level.
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// Also see err method.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b note
\b0 (
\i \cf4 mesg:
\i0 \cf0  &\cf5 str\cf0 ) -> Parser<T>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// optional := e?
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b optional
\b0 () -> Parser<Option<T>>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// Uses parser to parse text. Also see everything method.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b parse
\b0 (
\i \cf4 file:
\i0 \cf0  @~\cf5 str\cf0 , 
\i \cf4 text:
\i0 \cf0  &\cf5 str\cf0 ) -> ParseStatus<T>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// Succeeds if parser matches input n to m times (inclusive).
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b r
\b0 (
\i \cf4 n:
\i0 \cf0  \cf5 uint\cf0 , 
\i \cf4 m:
\i0 \cf0  \cf5 uint\cf0 ) -> Parser<@~[T]>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// r0 := e*
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// 
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// Values for each parsed e are returned.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b r0
\b0 () -> Parser<@~[T]>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// r1 := e+
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// 
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// Values for each parsed e are returned.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b r1
\b0 () -> Parser<@~[T]>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// s0 := e [ \\t\\r\\n]*
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b s0
\b0 () -> Parser<T>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// s1 := e [ \\t\\r\\n]+
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b s1
\b0 () -> Parser<T>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// If parser1 is successful is successful then parser2 is called (and the value from parser1
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// is ignored). If parser1 fails parser2 is not called.
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b then
\b0 <
\i \cf4 U
\i0 \cf0 >(
\i \cf4 parser2:
\i0 \cf0  Parser<U>) -> Parser<U>;\
\cb6 	\cb1 \
\cb6 	
\i \cf3 \cb1 /// If parser is successful then the function returned by eval is called
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// with parser's result. If parser fails eval is not called.
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// 
\i0 \cf0 \
\cb6 	
\i \cf3 \cb1 /// Often used to translate parsed values: `p().thene(\{|pvalue| return(2*pvalue)\})`
\i0 \cf0 \
\cb6 	
\b \cf4 \cb1 fn
\b0 \cf0  
\b thene
\b0 <
\i \cf4 U
\i0 \cf0 >(
\i \cf4 eval:
\i0 \cf0  
\b \cf4 fn
\b0 \cf0 @ (T) -> Parser<U>) -> Parser<U>;\
\}\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\
\pard\pardeftab480\pardirnatural

\f0\b\fs48 \cf0 C99 parsers\

\f2\i\b0\fs32 \cf3 /// identifier := [a-zA-Z_] [a-zA-Z0-9_]*
\i0 \cf0 \

\i \cf3 /// 
\i0 \cf0 \

\i \cf3 /// Note that match1_0 can be used to easily implement custom identifier parsers.
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b identifier
\b0 () -> Parser<@~\cf5 str\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\i\fs32 \cf3 /// decimal_number := [0-9]+
\i0 \cf0 \

\i \cf3 /// 
\i0 \cf0 \

\i \cf3 /// Technically this is not supposed to match numbers with leading zeros,
\i0 \cf0 \

\i \cf3 /// but we do so to make this parser more reusable.
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b decimal_number
\b0 () -> Parser<\cf5 int\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\i\fs32 \cf3 /// octal_number := 0 [0-7]*
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b octal_number
\b0 () -> Parser<\cf5 int\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\i\fs32 \cf3 /// hex_number := 0[xX] [0-9a-fA-F]+
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b hex_number
\b0 () -> Parser<\cf5 int\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\i\fs32 \cf3 /// float_number := float1 | float2 | float3
\i0 \cf0 \

\i \cf3 /// 
\i0 \cf0 \

\i \cf3 /// float1 := [0-9]* '.' [0-9]+ exponent?
\i0 \cf0 \

\i \cf3 /// float2 := [0-9]+ '.' exponent?
\i0 \cf0 \

\i \cf3 /// float3 := [0-9]+ exponent
\i0 \cf0 \

\i \cf3 /// exponent := [eE] [+-]? [0-9]+
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b float_number
\b0 () -> Parser<\cf5 f64\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\i\fs32 \cf3 /// char_literal := '\\\\'' c_char_sequence '\\\\''
\i0 \cf0 \

\i \cf3 /// 
\i0 \cf0 \

\i \cf3 /// c_char_sequence := [^'\\n\\r\\\\]
\i0 \cf0 \

\i \cf3 /// c_char_sequence := escape_sequence
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b char_literal
\b0 () -> Parser<\cf5 char\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\i\fs32 \cf3 /// string_literal := '\\"' s_char* '\\"'
\i0 \cf0 \

\i \cf3 /// 
\i0 \cf0 \

\i \cf3 /// s_char := [^\\"\\n\\r\\\\]
\i0 \cf0 \

\i \cf3 /// s_char := escape_sequence
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b string_literal
\b0 () -> Parser<@~\cf5 str\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\i\fs32 \cf3 /// comment := '/*' ([^*] | '*' [^/])* '*/'
\i0 \cf0 \

\i \cf3 /// 
\i0 \cf0 \

\i \cf3 /// Note that these do not nest.
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b comment
\b0 () -> Parser<@~\cf5 str\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
\pard\pardeftab480\pardirnatural

\f2\i\fs32 \cf3 /// line_comment := '//' [^\\r\\n]*
\i0 \cf0 \

\b \cf4 fn
\b0 \cf0  
\b line_comment
\b0 () -> Parser<@~\cf5 str\cf0 >\
\pard\pardeftab480\pardirnatural

\f1\fs24 \cf0 \
}